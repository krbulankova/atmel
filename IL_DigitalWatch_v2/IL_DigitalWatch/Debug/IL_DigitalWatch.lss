
IL_DigitalWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000004b8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080013c  0080013c  00000588  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aca  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000741  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005db  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000228  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 35       	cpi	r26, 0x5D	; 93
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "atmega328p_gpio.h"


int main(void)
{
	Init_Ports();
  a6:	0e 94 5d 00 	call	0xba	; 0xba <Init_Ports>
	Init_TC0();
  aa:	0e 94 65 00 	call	0xca	; 0xca <Init_TC0>
	Init_TC1();
  ae:	0e 94 74 00 	call	0xe8	; 0xe8 <Init_TC1>
	Init_USART();
  b2:	0e 94 89 00 	call	0x112	; 0x112 <Init_USART>

	sei ();
  b6:	78 94       	sei
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x12>

000000ba <Init_Ports>:
uint8_t URB_CNT = 0, i = 0;


void Init_Ports()
{
	DDRD = 0b11111110;		// DDRD - porta D datu virziena re?istrs
  ba:	8e ef       	ldi	r24, 0xFE	; 254
  bc:	8a b9       	out	0x0a, r24	; 10
							// porta D izvadi PD1 l?dz PD7 konfigur?ti darb?bai uz izvadi
							// priekš displeja segmentiem a l?dz g,
							// kur PD1-a, PD2-b, PD3-c, PD4-d, PD5-e, PD6-g, PD7-g
							// savuk?rt PD0: darb?bai uz ievadi, priekš USART RX (seri?l? komunik?cija)
	
	DDRC = 0x1F;			// DDRD - porta C datu virziena re?istrs,ACTIVIZETI IZVADI:PC0, PC1,PC2, PC3, PC4
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	87 b9       	out	0x07, r24	; 7
							// izvadi PC0 l?dz PC3 konfigur?ti darb?bai uz izvadi
	DDRB = 0x2F;
  c2:	8f e2       	ldi	r24, 0x2F	; 47
  c4:	84 b9       	out	0x04, r24	; 4
							//DDRB = 0x20;            // 0b0010_0000, porta B 5. izvads darb?bai uz izvadi - t? ir lietot?ja gaismas diode uz ATmega328P Xplained Mini plates
	PORTB |= (1 << PORTB5);
  c6:	2d 9a       	sbi	0x05, 5	; 5
  c8:	08 95       	ret

000000ca <Init_TC0>:
}

void Init_TC0()
{
	TCNT0 = 0;
  ca:	16 bc       	out	0x26, r1	; 38
	OCR0A = 30;					// lai nodrošin?tu displeja kop?jo atjaunošan?s laiku aptuveni 8 ms
  cc:	8e e1       	ldi	r24, 0x1E	; 30
  ce:	87 bd       	out	0x27, r24	; 39
								// ik nepilnas 2 ms iesl?dzot/izsl?dzot katru no displeja cipariem
	
	TIMSK0 |= (1 << OCIE0A);	// timer/counter mask Register 0
  d0:	ee e6       	ldi	r30, 0x6E	; 110
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
								// OCIE0A: output compare interrupt enable 0
			
	TCCR0B |= (1 << CS02) | (1 << CS00);
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	85 60       	ori	r24, 0x05	; 5
  de:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1 << WGM01);
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	84 bd       	out	0x24, r24	; 36
  e6:	08 95       	ret

000000e8 <Init_TC1>:
}

void Init_TC1()
{
	TCNT1 = 0;
  e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = 15625;		// lai TC0 p?rtraukums izpild?tos katru 1 sekundi
  f0:	89 e0       	ldi	r24, 0x09	; 9
  f2:	9d e3       	ldi	r25, 0x3D	; 61
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	TIMSK1 |= (1 << OCIE1A);
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 60       	ori	r24, 0x0D	; 13
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <Init_USART>:
}

void Init_USART()
{
	UBRR0 = 103;							 // lai nodrošin?tu baud rate = 9600
 112:	87 e6       	ldi	r24, 0x67	; 103
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 11a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);	 // lai aktiviz?tu MCU perif?rijas USART uztveroš?s (RX) da?as bloku
 11e:	80 e9       	ldi	r24, 0x90	; 144
 120:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);  // lai nodrošin?tu datu kadra izm?ru: 8 biti
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 12a:	08 95       	ret

0000012c <TC1_Stop>:
	
	//*USARTReadBuffer = '\0';
}
void TC1_Stop ()
{
	TCCR1B &= ~((1 << CS12) | (1 << CS10));
 12c:	e1 e8       	ldi	r30, 0x81	; 129
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8a 7f       	andi	r24, 0xFA	; 250
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <TC1_Start>:
}
void TC1_Start ()
{
	TCCR1B |= (1 << CS12) | (1 << CS10);
 138:	e1 e8       	ldi	r30, 0x81	; 129
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	85 60       	ori	r24, 0x05	; 5
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <commandCheck>:
}


void commandCheck()
{
	if (strcmp (USARTReadBuffer, "#CRST*") == 0)
 144:	64 e1       	ldi	r22, 0x14	; 20
 146:	71 e0       	ldi	r23, 0x01	; 1
 148:	8d e3       	ldi	r24, 0x3D	; 61
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcmp>
 150:	89 2b       	or	r24, r25
 152:	69 f4       	brne	.+26     	; 0x16e <commandCheck+0x2a>
	{
		secOnes = 0;
 154:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <secOnes>
		secTens = 0;
 158:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <secTens>
		minOnes = 0;
 15c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <minOnes>
		minTens = 0;
 160:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <minTens>
		hourOnes = 0;
 164:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <hourOnes>
		hourTens = 0;
 168:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <hourTens>
 16c:	08 95       	ret
	}
	
	else if (strcmp (USARTReadBuffer, "#CSTOP*") == 0)
 16e:	6b e1       	ldi	r22, 0x1B	; 27
 170:	71 e0       	ldi	r23, 0x01	; 1
 172:	8d e3       	ldi	r24, 0x3D	; 61
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcmp>
 17a:	89 2b       	or	r24, r25
 17c:	19 f4       	brne	.+6      	; 0x184 <commandCheck+0x40>
	{
		TC1_Stop();
 17e:	0e 94 96 00 	call	0x12c	; 0x12c <TC1_Stop>
 182:	08 95       	ret
	}
	
	else if (strcmp (USARTReadBuffer, "#CSTART*") == 0)
 184:	63 e2       	ldi	r22, 0x23	; 35
 186:	71 e0       	ldi	r23, 0x01	; 1
 188:	8d e3       	ldi	r24, 0x3D	; 61
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcmp>
 190:	89 2b       	or	r24, r25
 192:	19 f4       	brne	.+6      	; 0x19a <commandCheck+0x56>
	{
		TC1_Start();
 194:	0e 94 9c 00 	call	0x138	; 0x138 <TC1_Start>
 198:	08 95       	ret
	}
	
	else if (strcmp (USARTReadBuffer, "#MODE1*") == 0)
 19a:	6c e2       	ldi	r22, 0x2C	; 44
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	8d e3       	ldi	r24, 0x3D	; 61
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcmp>
 1a6:	89 2b       	or	r24, r25
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <commandCheck+0x6e>
	{
		modeCheck = 'm';
 1aa:	8d e6       	ldi	r24, 0x6D	; 109
 1ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modeCheck>
 1b0:	08 95       	ret
	}
	
	else if (strcmp (USARTReadBuffer, "#MODE2*") == 0)
 1b2:	64 e3       	ldi	r22, 0x34	; 52
 1b4:	71 e0       	ldi	r23, 0x01	; 1
 1b6:	8d e3       	ldi	r24, 0x3D	; 61
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcmp>
 1be:	89 2b       	or	r24, r25
 1c0:	21 f4       	brne	.+8      	; 0x1ca <commandCheck+0x86>
	{
		modeCheck = 'h';
 1c2:	88 e6       	ldi	r24, 0x68	; 104
 1c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modeCheck>
 1c8:	08 95       	ret
	}
	
	
	else if (USARTReadBuffer [0] == '#' && USARTReadBuffer [1] == 'C' && USARTReadBuffer [2] == 'C' && USARTReadBuffer [3] == 'H' && USARTReadBuffer [4] == 'T' && USARTReadBuffer [5] == '=' && USARTReadBuffer [12] == '*')
 1ca:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USARTReadBuffer>
 1ce:	83 32       	cpi	r24, 0x23	; 35
 1d0:	91 f5       	brne	.+100    	; 0x236 <commandCheck+0xf2>
 1d2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <USARTReadBuffer+0x1>
 1d6:	83 34       	cpi	r24, 0x43	; 67
 1d8:	71 f5       	brne	.+92     	; 0x236 <commandCheck+0xf2>
 1da:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USARTReadBuffer+0x2>
 1de:	83 34       	cpi	r24, 0x43	; 67
 1e0:	51 f5       	brne	.+84     	; 0x236 <commandCheck+0xf2>
 1e2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USARTReadBuffer+0x3>
 1e6:	88 34       	cpi	r24, 0x48	; 72
 1e8:	31 f5       	brne	.+76     	; 0x236 <commandCheck+0xf2>
 1ea:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <USARTReadBuffer+0x4>
 1ee:	84 35       	cpi	r24, 0x54	; 84
 1f0:	11 f5       	brne	.+68     	; 0x236 <commandCheck+0xf2>
 1f2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <USARTReadBuffer+0x5>
 1f6:	8d 33       	cpi	r24, 0x3D	; 61
 1f8:	f1 f4       	brne	.+60     	; 0x236 <commandCheck+0xf2>
 1fa:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <USARTReadBuffer+0xc>
 1fe:	8a 32       	cpi	r24, 0x2A	; 42
 200:	d1 f4       	brne	.+52     	; 0x236 <commandCheck+0xf2>
	{//#CCHT=121212* Uzst?da vajadz?go laiku
		hourTens = USARTReadBuffer [6] -'0';//no ASCII at?em ASCII 0,kur '0' = 48
 202:	ed e3       	ldi	r30, 0x3D	; 61
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	86 81       	ldd	r24, Z+6	; 0x06
 208:	80 53       	subi	r24, 0x30	; 48
 20a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hourTens>
		hourOnes = USARTReadBuffer [7] -'0';
 20e:	87 81       	ldd	r24, Z+7	; 0x07
 210:	80 53       	subi	r24, 0x30	; 48
 212:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <hourOnes>
		minTens = USARTReadBuffer [8] -'0';
 216:	80 85       	ldd	r24, Z+8	; 0x08
 218:	80 53       	subi	r24, 0x30	; 48
 21a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <minTens>
		minOnes = USARTReadBuffer [9] -'0';
 21e:	81 85       	ldd	r24, Z+9	; 0x09
 220:	80 53       	subi	r24, 0x30	; 48
 222:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <minOnes>
		secTens = USARTReadBuffer [10] -'0';
 226:	82 85       	ldd	r24, Z+10	; 0x0a
 228:	80 53       	subi	r24, 0x30	; 48
 22a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <secTens>
		secOnes = USARTReadBuffer [11] -'0';
 22e:	83 85       	ldd	r24, Z+11	; 0x0b
 230:	80 53       	subi	r24, 0x30	; 48
 232:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <secOnes>
 236:	08 95       	ret

00000238 <__vector_11>:
{
	TCCR1B |= (1 << CS12) | (1 << CS10);
}

ISR (TIMER1_COMPA_vect)			
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	// notiks p?reja uz šo p?rtraukuma apstr?des proced?ru, tad kad TCNT1 = OCR1A jeb TCNT1 = 15625, jo š? v?rt?ba ir ierakst?ta
	// ar? re?istr? OCR1A (OCR1A = 15625) ISR izpild?sies ik p?c vienas sekundes izmanto sekunžu skait?šanai
	
	secOnes++;
 256:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <secOnes>
 25a:	8f 5f       	subi	r24, 0xFF	; 255
						
	if (secOnes > 9)
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	18 f4       	brcc	.+6      	; 0x266 <__vector_11+0x2e>
ISR (TIMER1_COMPA_vect)			
{
	// notiks p?reja uz šo p?rtraukuma apstr?des proced?ru, tad kad TCNT1 = OCR1A jeb TCNT1 = 15625, jo š? v?rt?ba ir ierakst?ta
	// ar? re?istr? OCR1A (OCR1A = 15625) ISR izpild?sies ik p?c vienas sekundes izmanto sekunžu skait?šanai
	
	secOnes++;
 260:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <secOnes>
 264:	07 c0       	rjmp	.+14     	; 0x274 <__vector_11+0x3c>
						
	if (secOnes > 9)
	{
		secOnes = 0;
 266:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <secOnes>
		secTens++;
 26a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <secTens>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <secTens>
	}
	
	if (secTens > 5)
 274:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <secTens>
 278:	86 30       	cpi	r24, 0x06	; 6
 27a:	38 f0       	brcs	.+14     	; 0x28a <__vector_11+0x52>
	{
		secTens = 0;
 27c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <secTens>
		minOnes++;
 280:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <minOnes>
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <minOnes>
	}
	
	if (minOnes > 9)
 28a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <minOnes>
 28e:	8a 30       	cpi	r24, 0x0A	; 10
 290:	38 f0       	brcs	.+14     	; 0x2a0 <__vector_11+0x68>
	{
		minOnes = 0;
 292:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <minOnes>
		minTens++;
 296:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <minTens>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <minTens>
	}
	
	if (minTens > 5)
 2a0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <minTens>
 2a4:	86 30       	cpi	r24, 0x06	; 6
 2a6:	38 f0       	brcs	.+14     	; 0x2b6 <__vector_11+0x7e>
	{
		minTens = 0;
 2a8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <minTens>
		hourOnes++;
 2ac:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <hourOnes>
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <hourOnes>
	}
	
	if (hourOnes > 9)
 2b6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <hourOnes>
 2ba:	8a 30       	cpi	r24, 0x0A	; 10
 2bc:	40 f0       	brcs	.+16     	; 0x2ce <__vector_11+0x96>
	{
		hourOnes = 0;
 2be:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <hourOnes>
		hourTens++;
 2c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <hourTens>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <hourTens>
 2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <__vector_11+0xba>
	}
	
	if (hourTens >=4 && hourOnes >=2)
 2ce:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <hourTens>
 2d2:	94 30       	cpi	r25, 0x04	; 4
 2d4:	70 f0       	brcs	.+28     	; 0x2f2 <__vector_11+0xba>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	60 f0       	brcs	.+24     	; 0x2f2 <__vector_11+0xba>
	{
		secOnes = 0;
 2da:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <secOnes>
		secTens = 0;
 2de:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <secTens>
		minOnes = 0;
 2e2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <minOnes>
		minTens = 0;
 2e6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <minTens>
		hourOnes = 0;
 2ea:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <hourOnes>
		hourTens = 0;
 2ee:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <hourTens>
	}
	
	DigitUpdate [0] = DisplayDigitHolder [secOnes];
 2f2:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <secOnes>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ea 5f       	subi	r30, 0xFA	; 250
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	80 81       	ld	r24, Z
 2fe:	e7 e5       	ldi	r30, 0x57	; 87
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	80 83       	st	Z, r24
	DigitUpdate [1] = DisplayDigitHolder [secTens];
 304:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <secTens>
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	aa 5f       	subi	r26, 0xFA	; 250
 30c:	be 4f       	sbci	r27, 0xFE	; 254
 30e:	5c 91       	ld	r21, X
 310:	51 83       	std	Z+1, r21	; 0x01
	DigitUpdate [2] = DisplayDigitHolder [minOnes];
 312:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <minOnes>
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	aa 5f       	subi	r26, 0xFA	; 250
 31a:	be 4f       	sbci	r27, 0xFE	; 254
 31c:	2c 91       	ld	r18, X
 31e:	22 83       	std	Z+2, r18	; 0x02
	DigitUpdate [3] = DisplayDigitHolder [minTens];
 320:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <minTens>
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	aa 5f       	subi	r26, 0xFA	; 250
 328:	be 4f       	sbci	r27, 0xFE	; 254
 32a:	9c 91       	ld	r25, X
 32c:	93 83       	std	Z+3, r25	; 0x03
	DigitUpdate [4] = DisplayDigitHolder [hourOnes];
 32e:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <hourOnes>
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	aa 5f       	subi	r26, 0xFA	; 250
 336:	be 4f       	sbci	r27, 0xFE	; 254
 338:	4c 91       	ld	r20, X
 33a:	44 83       	std	Z+4, r20	; 0x04
	DigitUpdate [5] = DisplayDigitHolder [hourTens];
 33c:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <hourTens>
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	aa 5f       	subi	r26, 0xFA	; 250
 344:	be 4f       	sbci	r27, 0xFE	; 254
 346:	3c 91       	ld	r19, X
 348:	35 83       	std	Z+5, r19	; 0x05
	
	Display_mm_ss [0] = DigitUpdate [0];
 34a:	e0 e1       	ldi	r30, 0x10	; 16
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	80 83       	st	Z, r24
	Display_mm_ss [1] = DigitUpdate [1];
 350:	51 83       	std	Z+1, r21	; 0x01
	Display_mm_ss [2] = DigitUpdate [2];
 352:	22 83       	std	Z+2, r18	; 0x02
	Display_mm_ss [3] = DigitUpdate [3];
 354:	93 83       	std	Z+3, r25	; 0x03
	
	Display_hh_mm [0] = DigitUpdate [2];
 356:	e3 e5       	ldi	r30, 0x53	; 83
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	20 83       	st	Z, r18
	Display_hh_mm [1] = DigitUpdate [3];
 35c:	91 83       	std	Z+1, r25	; 0x01
	Display_hh_mm [2] = DigitUpdate [4];
 35e:	42 83       	std	Z+2, r20	; 0x02
	Display_hh_mm [3] = DigitUpdate [5];
 360:	33 83       	std	Z+3, r19	; 0x03
	
	PORTC ^= ( 1<< PORTC4);//PORTC4 jev pc4
 362:	98 b1       	in	r25, 0x08	; 8
 364:	80 e1       	ldi	r24, 0x10	; 16
 366:	89 27       	eor	r24, r25
 368:	88 b9       	out	0x08, r24	; 8
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	uint8_t temp;
	
// notiks p?reja uz šo p?rtraukuma apstr?des proced?ru, tad kad TCNT0 = OCR0A jeb TCNT0 = 30, jo š? v?rt?ba ir ierakst?ta
// ar? re?istr? OCR1A (OCR1A = 30) ISR izpild?sies ik p?c aptveni 2 ms izmanto displeja kop?go izvadu (kur piesl?gti tranzsitori) multipleks?šanai
	
	if (modeCheck == 'm')
 39a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <modeCheck>
 39e:	8d 36       	cpi	r24, 0x6D	; 109
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <__vector_14+0x28>
	{
		PORTD = Display_mm_ss [TC0_i];
 3a2:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TC0_i>
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	e0 5f       	subi	r30, 0xF0	; 240
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	80 81       	ld	r24, Z
 3ae:	8b b9       	out	0x0b, r24	; 11
	}
	
	if (modeCheck == 'h')
 3b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <modeCheck>
 3b4:	88 36       	cpi	r24, 0x68	; 104
 3b6:	39 f4       	brne	.+14     	; 0x3c6 <__vector_14+0x3e>
	{
		PORTD = Display_hh_mm [TC0_i];
 3b8:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TC0_i>
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ed 5a       	subi	r30, 0xAD	; 173
 3c0:	fe 4f       	sbci	r31, 0xFE	; 254
 3c2:	80 81       	ld	r24, Z
 3c4:	8b b9       	out	0x0b, r24	; 11
	}
	temp = PINC;//porta las?šanas re?istrs
 3c6:	86 b1       	in	r24, 0x06	; 6
	temp = temp & 0x10;
		
	
	//PORTB = DisplayDigitScan [TC0_i];
	PORTC = DisplayDigitScan [TC0_i] | temp;
 3c8:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TC0_i>
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ee 5f       	subi	r30, 0xFE	; 254
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	80 71       	andi	r24, 0x10	; 16
 3d4:	90 81       	ld	r25, Z
 3d6:	89 2b       	or	r24, r25
 3d8:	88 b9       	out	0x08, r24	; 8
	TC0_i++;
 3da:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TC0_i>
 3de:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (TC0_i == 4)
 3e0:	84 30       	cpi	r24, 0x04	; 4
 3e2:	19 f0       	breq	.+6      	; 0x3ea <__vector_14+0x62>
	temp = temp & 0x10;
		
	
	//PORTB = DisplayDigitScan [TC0_i];
	PORTC = DisplayDigitScan [TC0_i] | temp;
	TC0_i++;
 3e4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <TC0_i>
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__vector_14+0x66>
	
	if (TC0_i == 4)
	{
		TC0_i = 0;
 3ea:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <TC0_i>
	}
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <__vector_18>:

ISR (USART_RX_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	2f 93       	push	r18
 40c:	3f 93       	push	r19
 40e:	4f 93       	push	r20
 410:	5f 93       	push	r21
 412:	6f 93       	push	r22
 414:	7f 93       	push	r23
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
		modeCheck = 'h';
	}
	*/

	
	USARTReadBuffer [URB_CNT] = UDR0;
 422:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 42c:	fc 01       	movw	r30, r24
 42e:	e3 5c       	subi	r30, 0xC3	; 195
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	20 83       	st	Z, r18
	
	if (USARTReadBuffer [0] != '#')
 434:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <USARTReadBuffer>
 438:	33 32       	cpi	r19, 0x23	; 35
 43a:	91 f0       	breq	.+36     	; 0x460 <__vector_18+0x60>
	{
		URB_CNT = 255;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
		
		for (uint8_t i = 0; i < bufferSize; i++)
 442:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 446:	88 23       	and	r24, r24
 448:	b1 f0       	breq	.+44     	; 0x476 <__vector_18+0x76>
 44a:	ed e3       	ldi	r30, 0x3D	; 61
 44c:	f1 e0       	ldi	r31, 0x01	; 1
 44e:	81 50       	subi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	82 5c       	subi	r24, 0xC2	; 194
 454:	9e 4f       	sbci	r25, 0xFE	; 254
		{
			USARTReadBuffer [i] = 0;
 456:	11 92       	st	Z+, r1
	
	if (USARTReadBuffer [0] != '#')
	{
		URB_CNT = 255;
		
		for (uint8_t i = 0; i < bufferSize; i++)
 458:	e8 17       	cp	r30, r24
 45a:	f9 07       	cpc	r31, r25
 45c:	e1 f7       	brne	.-8      	; 0x456 <__vector_18+0x56>
 45e:	0b c0       	rjmp	.+22     	; 0x476 <__vector_18+0x76>
		{
			USARTReadBuffer [i] = 0;
		}
	}
	
	else if (USARTReadBuffer [URB_CNT] == '*')
 460:	2a 32       	cpi	r18, 0x2A	; 42
 462:	49 f4       	brne	.+18     	; 0x476 <__vector_18+0x76>
	{
		USARTReadBuffer [URB_CNT + 1] = '\0';
 464:	fc 01       	movw	r30, r24
 466:	e3 5c       	subi	r30, 0xC3	; 195
 468:	fe 4f       	sbci	r31, 0xFE	; 254
 46a:	11 82       	std	Z+1, r1	; 0x01
		URB_CNT = 255;
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
		commandCheck ();	
 472:	0e 94 a2 00 	call	0x144	; 0x144 <commandCheck>
		}
		*/
	
	}
	
	URB_CNT++;
 476:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>

}
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <strcmp>:
 4a2:	fb 01       	movw	r30, r22
 4a4:	dc 01       	movw	r26, r24
 4a6:	8d 91       	ld	r24, X+
 4a8:	01 90       	ld	r0, Z+
 4aa:	80 19       	sub	r24, r0
 4ac:	01 10       	cpse	r0, r1
 4ae:	d9 f3       	breq	.-10     	; 0x4a6 <strcmp+0x4>
 4b0:	99 0b       	sbc	r25, r25
 4b2:	08 95       	ret

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
